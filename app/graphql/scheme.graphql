schema {
    query: Query
    mutation: Mutation
}

enum Roles {
    ADMIN
    USER
}

directive @format(
    pattern: String! = "Use `FirstName SecondName` name format for a singer"
) on FIELD_DEFINITION

type Song {
    id: ID!
    name: String!
    duration: Int!
    file: ByteArray!
    albumId: String
    cover: ByteArray
    genre: String
}

input SongDescription {
    name: String!
    duration: Int!
    file: ByteArray!
    cover: ByteArray
    genre: String
}

type Album {
    id: ID!
    name: String!
    cover: ByteArray!
    auditions: Int!
    songs: [Song!]!
}

input AlbumDescription {
    name: String!
    cover: ByteArray!
    auditions: Int!
    songs: [SongDescription!]!
}

interface Musician {
    id: ID!
    auditionsNumber: Int!
    songs: [Song!]!
    albums: [Album!]
    photoCover: ByteArray!
}

type Person implements Musician {
    id: ID!
    auditionsNumber: Int!
    songs: [Song!]!
    albums: [Album!]
    photoCover: ByteArray!
    firstName: String!
    secondName: String!
}

input PersonDescription {
    auditionsNumber: Int!
    songs: [SongDescription!]!
    albums: [AlbumDescription!]
    photoCover: ByteArray!
    firstName: String!
    secondName: String!
}

type MusicBand implements Musician {
    id: ID!
    auditionsNumber: Int!
    songs: [Song!]!
    albums: [Album!]
    photoCover: ByteArray!
    name: String!
    members: [Person!]!
}

input MusicBandDescription {
    auditionsNumber: Int!
    songs: [SongDescription!]!
    albums: [AlbumDescription!]
    photoCover: ByteArray!
    name: String!
    members: [PersonDescription!]!
}

type User {
    id: ID!
    name: String!
    role: Roles!
    email: String!
    password: String!
}

input UserDescription {
    name: String!
    role: Roles!
    email: String!
    password: String!
}

type ActivityList{
    genres: [String!]
    musicians: [Musician!]
    songs: [Song!]
}

type Query {
    getSongs: [Song!]
    getUsers: [User!]
    getSingers: [Musician!]
    getMusicBands: [Musician!]
    getAlbums: [Album!]

    getUser(id: ID!): User
    getSong(id: ID!): Song
    getSinger(id: ID!): Musician
    getMusicBand(id: ID!): Musician
    getAlbum(id: ID!): Album

#    likeSong(id: ID, name: String!): Song
#    likeAlbum(id: ID, name: String!): Album
#    likeMusician(id: ID, bandName: String, singerName: String): Musician
#    recommendSongs(userId: ID!): [Song!]!
#    get_activity: ActivityList
}

type Mutation {
    addUser(data: UserDescription!): User
    modifyUser(id: ID!, data: UserDescription): User
    deleteUser(id: ID!): User

    addSong(data: SongDescription!): Song
    modifySong(id: ID!, data: SongDescription): Song
    deleteSong(id: ID!): Song

    addAlbum(data: AlbumDescription!): Album
    modifyAlbum(id: ID!, data: AlbumDescription): Album
    deleteAlbum(id: ID!): Album

    addMusician(data: PersonDescription!): Person
    modifyMusician(id: ID!, data: PersonDescription): Person
    deleteMusician(id: ID!): Person

    addMusicBand(data: MusicBandDescription!): MusicBand
    modifyMusicBand(id: ID!, data: MusicBandDescription): MusicBand
    deleteMusicBand(id: ID!): MusicBand
}

scalar ByteArray